// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../gd-sprest

declare module 'gd-sprest-bs' {
    export * from "gd-sprest-bs/rest";
    
    import * as Components from "gd-sprest-bs/components/types";
    import * as WebParts from "gd-sprest-bs/webparts/types";
    export {
        Components,
        WebParts
    }
}

declare module 'gd-sprest-bs/rest' {
    import { IREST } from "gd-sprest";
    import * as Components from "gd-sprest-bs/components/types";
    import * as WebParts from "gd-sprest-bs/webparts/types";
    
    export interface IRESTBS extends IREST {
        BS: {
            $: any,
            Components,
            WebParts
        }
    }
    
    export var $REST: IRESTBS;
}

declare module 'gd-sprest-bs/components/types' {
    export * from "gd-sprest-bs/components/types/button";
    export * from "gd-sprest-bs/components/types/buttonGroup";
    export * from "gd-sprest-bs/components/types/dropdown";
    export * from "gd-sprest-bs/components/types/form";
    export * from "gd-sprest-bs/components/types/inputGroup";
    export * from "gd-sprest-bs/components/types/modal";
    export * from "gd-sprest-bs/components/types/nav";
}

declare module 'gd-sprest-bs/webparts/types' {
    export * from "gd-sprest-bs/webparts/types/helper";
    export * from "gd-sprest-bs/webparts/types/wp";
    export * from "gd-sprest-bs/webparts/types/wpList";
    export * from "gd-sprest-bs/webparts/types/wpSearch";
    export * from "gd-sprest-bs/webparts/types/wpTabs";
    export * from "gd-sprest-bs/webparts/types/wpTaxonomy";
}

declare module 'gd-sprest-bs/components/types/button' {
    /**
        * Button
        */
    export const Button: (props: IButtonProps) => Element | string;
    
    /**
        * Button Properties
        */
    export interface IButtonProps {
            className?: string;
            el?: Element | HTMLElement;
            id?: string;
            isBlock?: boolean;
            isDisabled?: boolean;
            isLarge?: boolean;
            isOutline?: boolean;
            isSmall?: boolean;
            onClick?: (ev?: Event) => void;
            target?: string;
            text?: string;
            toggle?: string;
            type?: number;
    }
    
    /**
        * Button Types
        */
    export const ButtonTypes: {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Link: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-sprest-bs/components/types/buttonGroup' {
    import { IButtonProps } from "gd-sprest-bs/components/types";
    
    /**
        * Button Group
        */
    export const ButtonGroup: (props: IButtonGroupProps) => Element | string;
    
    /**
        * Button Group Properties
        */
    export interface IButtonGroupProps {
            buttons?: Array<IButtonProps>;
            buttonType?: number;
            className?: string;
            el?: Element | HTMLElement;
            id?: string;
            isLarge?: boolean;
            isSmall?: boolean;
            isVertical?: boolean;
            label?: string;
    }
}

declare module 'gd-sprest-bs/components/types/dropdown' {
    /**
        * Dropdown
        */
    export const Dropdown: (props: IDropdownProps) => Element | string;
    
    /**
        * Dropdown Item
        */
    export interface IDropdownItem {
            data?: any;
            href?: string;
            isSelected?: boolean;
            onChange?: (item?: IDropdownItem | Array<IDropdownItem>, ev?: Event) => void;
            text?: string;
            value?: any;
    }
    
    /**
        * Dropdown Properties
        */
    export interface IDropdownProps {
            items: Array<IDropdownItem>;
            onChange?: (item?: IDropdownItem | Array<IDropdownItem>, ev?: Event) => void;
            className?: string;
            el?: Element | HTMLElement;
            formFl?: boolean;
            id?: string;
            label?: string;
            multi?: boolean;
            type?: number;
            value?: any;
    }
    
    /**
        * Dropdown Types
        */
    export const DropdownTypes: {
            Danger: number;
            Info: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-sprest-bs/components/types/form' {
    import { IDropdownItem } from "gd-sprest-bs/components/types/dropdown";
    
    /**
        * Form
        */
    export interface IForm {
            form: HTMLFormElement,
            getValues: () => { [key: string]: any };
    }
    
    /**
        * Form
        */
    export const Form: (props: IFormProps) => IForm;
    
    /**
        * Form Control
        */
    export interface IFormControl {
            description?: string;
            isSmall?: boolean;
            isLarge?: boolean;
            label?: string;
            name?: string;
            type?: number;
    }
    
    /**
        * Form Control - Checkbox
        */
    export interface IFormControlCheckbox extends IFormControl { }
    
    /**
        * Form Control - Dropdown
        */
    export interface IFormControlDropdown extends IFormControl {
            items?: Array<IDropdownItem>;
            onChange?: (item: IDropdownItem | Array<IDropdownItem>) => void;
            placeholder?: string;
            type?: number;
    }
    
    /**
        * Form Control - TextField
        */
    export interface IFormControlTextField extends IFormControl {
            onChange?: (value: string) => void;
            placeholder?: string;
    }
    
    /**
        * Form Properties
        */
    export interface IFormProps {
            el: Element | HTMLElement,
            rows: Array<IFormRow>;
            value?: any;
    }
    
    /**
        * Form Control Type
        */
    export const FormControlTypes: {
            CheckBox: number;
            Email: number;
            Dropdown: number;
            File: number;
            MultiDropdown: number;
            Password: number;
            Range: number;
            Readonly: number;
            TextArea: number;
            TextField: number;
    }
    
    /**
        * Form Row
        */
    export interface IFormRow {
            isAutoSized?: boolean;
            isCentered?: boolean;
            control?: IFormControl;
            columns?: Array<{
                    control: IFormControl;
                    size?: number;
            }>
    }
}

declare module 'gd-sprest-bs/components/types/inputGroup' {
    /**
        * Input Group
        */
    export const InputGroup: (props: IInputGroupProps) => Element | string;
    
    /**
        * Input Group Properties
        */
    export interface IInputGroupProps {
            appendedLabel?: string;
            className?: string;
            description?: string;
            el?: Element | HTMLElement;
            id?: string;
            isLarge?: boolean;
            isSmall?: boolean;
            label?: string;
            onChange?: (value?: string, ev?: Event) => void;
            placeholder?: string;
            prependedLabel?: string;
            type?: number;
            value?: string;
    }
    
    /**
        * Input Group Types
        */
    export const InputGroupTypes: {
            Email: number;
            File: number;
            Password: number;
            TextArea: number;
            TextField: number;
    }
}

declare module 'gd-sprest-bs/components/types/modal' {
    /**
        * Modal
        */
    export const Modal: (props: IModalProps) => Element | string;
    
    /**
        * Modal Properties
        */
    export interface IModalProps {
            className?: string;
            el?: Element | HTMLElement;
            disableFade?: boolean;
            hideCloseButton?: boolean;
            id?: string;
            isCentered?: boolean;
            isLarge?: boolean;
            isSmall?: boolean;
            onRenderBody?: (el: HTMLDivElement) => void;
            onRenderFooter?: (el: HTMLDivElement) => void;
            title?: string;
    }
}

declare module 'gd-sprest-bs/components/types/nav' {
    /**
        * Navigation
        */
    export const Navigation: (props: INavProps) => Element | string;
    
    /**
        * Navigation Properties
        */
    export interface INavProps {
            className?: string;
            el?: Element | HTMLElement;
            enableFade?: boolean;
            enableFill?: boolean;
            id?: string;
            items?: Array<INavLink>;
            isJustified?: boolean;
            isPills?: boolean;
            isTabs?: boolean;
            isVertical?: boolean;
    }
    
    /**
        * Navigation Links
        */
    export interface INavLink {
            isActive?: boolean;
            isDisabled?: boolean;
            href?: string;
            onClick?: (item?: INavLink, ev?: Event) => void;
            onRenderTab?: (el: HTMLDivElement) => void;
            tabContent?: string;
            title?: string;
    }
}

declare module 'gd-sprest-bs/webparts/types/helper' {
    import { IFormControl } from "gd-sprest-bs/components/types/form";
    import { IWebPartInfo } from "gd-sprest-bs/webparts/types/wp";
    
    /**
        * Helper Methods
        */
    export const Helper: IHelper;
    
    /**
        * Helper Methods
        */
    export interface IHelper {
            /**
                * Method to get the webpart
                * @param wpId - The webpart id.
                */
            getWebPart(wpId: string): PromiseLike<IWPInstance>;
    
            /**
                * Method to get the webpart id for a specified element
                * @param el - The target element.
                */
            getWebPartId(el: HTMLElement): string;
    
            /**
                * Method to render the edit form.
                * @param wpInfo - The webpart information.
                * @param formControls - The form controls to render.
                */
            renderEditForm: (wpInfo: IWebPartInfo, formControls: Array<IFormControl>) => void;
    
            /**
                * Method to save the webpart configuration.
                * This method may execute a postback, based on the page type.
                * @param wpId - The webpart id.
                * @param cfgId: The configuration element id.
                * @param wpCfg - The webpart configuration.
                */
            saveConfiguration(wpId: string, cfgId?: string, wpCfg?: any): PromiseLike<void>;
    
            /**
                * Method to update the configuration element
                * @param cfgId: The configuration element id.
                * @param elTarget - The target element.
                * @param wpCfg - The webpart configuration.
                */
            updateConfigurationInElement(cfgId: string, elTarget: HTMLInputElement, wpCfg);
    
            /**
                * Method to update the webpart content elements
                * @param wpId - The webpart id.
                * @param cfgId: The configuration element id.
                * @param wpCfg - The webpart configuration.
                */
            updateWebPartContentElements(wpId: string, cfgId?: string, wpCfg?: any): boolean;
    }
    
    /**
        * WebPart Information
        */
    export interface IWPInstance {
            Context: any;
            Properties: any;
            WebPart: any;
            WebPartDefinition: any;
    }
}

declare module 'gd-sprest-bs/webparts/types/wp' {
    import { IButtonProps } from "gd-sprest-bs/components/types/button";
    import { IFormControl } from "gd-sprest-bs/components/types/form";
    
    /**
        * Web Part
        */
    export const WebPart: (props: IWebPartProps) => IWebPart;
    
    /**
        * WebPart
        */
    export interface IWebPart<IWPCfg = IWebPartCfg, IWPInfo = IWebPartInfo> {
            /** The webpart configuration. */
            cfg: IWPCfg;
    
            /** The webpart information. */
            info: IWPInfo;
    
            /** Method to update the edit form. */
            updateEditForm?: (formControls: Array<IFormControl>) => void;
    }
    
    /**
        * WebPart Information
        */
    export interface IWebPartInfo<IWPCfg = IWebPartCfg> {
            /** The configuration */
            cfg: IWPCfg;
    
            /** The element to render the webpart to */
            el: HTMLElement;
    
            /** The webpart id */
            wpId: string;
    }
    
    /**
        * WebPart Object
        */
    export interface IWebPartObject {
            /** The JSOM context object */
            Context: any;
    
            /** The webpart properties object */
            Properties: any;
    
            /** The webpart id */
            WebPartId: string;
    
            /** The webpart html element */
            WebPart: HTMLElement;
    
            /** The webpart definition object */
            WebPartDefinition: any;
    }
    
    /**
        * WebPart Properties
        */
    export interface IWebPartProps<IWPInfo = IWebPartInfo, IWPEditForm = IWebPartEditForm> {
            /** The optional configuration element id */
            cfgElementId?: string;
    
            /** The class name. */
            className?: string;
    
            /** The target element id to render the webpart to */
            elementId?: string;
    
            /** The edit form */
            editForm?: IWPEditForm;
    
            /** The optional help link properties */
            helpProps?: {
                    /** The link title */
                    title?: string;
    
                    /** The link url */
                    url: string;
            };
    
            /** The post render event */
            onPostRender?: (wp: IWPInfo, ...args) => void;
    
            /** The render event triggered when the page is in 'Display' mode */
            onRenderDisplay?: (wp: IWPInfo) => any;
    
            /** The render event triggered when the page is in 'Edit' mode */
            onRenderEdit?: (wp: IWPInfo) => any;
    
            /** The webpart class name */
            wpClassName?: string;
    }
    
    /**
        * WebPart Configuration
        */
    export const WPCfg: (cfg: IWebPartCfg, props: IWebPartProps) => {
            /** Method to render the edit form. */
            renderForm?: (formControls: Array<IFormControl>) => void;
    };
    
    /**
        * WebPart Configuration
        */
    export interface IWebPartCfg {
            /** The webpart id */
            WebPartId?: string;
    }
    
    /**
        * WebPart Edit Form
        */
    export interface IWebPartEditForm<IWPCfg = IWebPartCfg, IWPInfo = IWebPartInfo> {
            /** The form action buttons displayed in the footer of the modal. */
            actions?: Array<IButtonProps>;
    
            /** The render form event. */
            onRenderForm?: (wpInfo: IWPInfo) => Array<IFormControl> | PromiseLike<Array<IFormControl>> | void;
    
            /** The save event. */
            onSave?: (wpCfg: IWPCfg) => IWPCfg;
    
            /** True to hide the save button. */
            showSaveButton?: boolean;
    }
}

declare module 'gd-sprest-bs/webparts/types/wpList' {
    import { Types } from "gd-sprest";
    import { IFormControl } from "gd-sprest-bs/components/types/form";
    import { IWebPart, IWebPartInfo, IWebPartProps, IWebPartCfg, IWebPartEditForm } from "gd-sprest-bs/webparts/types/wp";
    
    /**
        * List WebPart
        */
    export const WPList: (props: IWPListProps) => IWPList;
    
    /**
        * List WebPart
        */
    export interface IWPList<IListCfg = IWPListCfg, IListInfo = IWPListInfo> extends IWebPart<IListCfg, IListInfo> { }
    
    /**
        * List WebPart Information
        */
    export interface IWPListInfo<IListCfg = IWPListCfg> extends IWebPartInfo<IListCfg> { }
    
    /**
        * List WebPart Properties
        */
    export interface IWPListProps<IListInfo=IWPListInfo, IListEditForm=IWPListEditForm> extends IWebPartProps<IListInfo, IListEditForm> {
            /** The caml query. */
            camlQuery?: string;
    
            /** The odata query. */
            odataQuery?: Types.SP.ODataQuery;
    
            /** The executing caml query event. */
            onExecutingCAMLQuery?: (wpInfo: IListInfo, caml: string) => string;
    
            /** The executing odata query event. */
            onExecutingODATAQuery?: (wpInfo: IListInfo, odata: Types.SP.ODataQuery) => Types.SP.ODataQuery;
    
            /** The on render items event. */
            onRenderItems?: (wpInfo: IListInfo, items: Array<Types.SP.IListItemQueryResult | Types.SP.IListItemResult>) => void;
    }
    
    /**
        * WebPart List Edit Form
        */
    export const WPListEditForm: (props: IWPListEditForm) => IWPListEditForm;
    
    /**
        * List WebPart Configuration
        */
    export interface IWPListCfg extends IWebPartCfg {
            /** The list name */
            ListName?: string;
    
            /** The relative web url */
            WebUrl?: string;
    }
    
    /**
        * WebPart List Edit Form
        */
    export interface IWPListEditForm<IListCfg = IWPListCfg, IListInfo = IWPListInfo> extends IWebPartEditForm<IListCfg, IListInfo> {
            /** The odata list query. */
            listQuery?: Types.SP.ODataQuery;
    
            /** The list changed event. */
            onListChanged?: (wpInfo: IListInfo, list?: Types.SP.IListQueryResult | Types.SP.IListResult) => Array<IFormControl> | PromiseLike<Array<IFormControl>> | void;
    
            /** The lists rendering event. */
            onListsRendering?: (wpInfo: IListInfo, lists?: Array<Types.SP.IListQueryResult | Types.SP.IListResult>) => Array<Types.SP.IListQueryResult | Types.SP.IListResult>;
    
            /** The render form event. */
            onRenderForm?: (wpInfo: IListInfo, list?: Types.SP.IListQueryResult | Types.SP.IListResult) => Array<IFormControl> | PromiseLike<Array<IFormControl>> | void;
    }
}

declare module 'gd-sprest-bs/webparts/types/wpSearch' {
    import { Types } from "gd-sprest";
    import { IWPList, IWPListInfo, IWPListProps } from "gd-sprest-bs/webparts/types/wpList";
    import { IWPListCfg, IWPListEditForm } from "gd-sprest-bs/webparts/types/wpList";
    
    /**
        * Search WebPart
        */
    export const WPSearch: (props: IWPListProps) => IWPSearch;
    
    /**
        * Search WebPart
        */
    export interface IWPSearch extends IWPList<IWPSearchCfg, IWPSearchInfo> {
            /** The filter items method. */
            filterItems: (filterText: string) => Array<Types.SP.IListItemQueryResult | Types.SP.IListItemResult>;
    }
    
    /**
        * Search WebPart Information
        */
    export interface IWPSearchInfo extends IWPListInfo<IWPSearchCfg> { }
    
    /**
        * Search WebPart Properties
        */
    export interface IWPSearchProps extends IWPListProps<IWPSearchInfo, IWPSearchEditForm> {
            /** The internal field names to be used for search. These will be appended to the configuration fields. */
            searchFields?: Array<{ name: string, type: string }>;
    }
    
    /**
        * Search WebPart Configuration
        */
    export interface IWPSearchCfg extends IWPListCfg {
            /** The searchable fields. */
            Fields: Array<{ name: string, type: string }>;
    }
    
    /**
        * Search WebPart Edit Form
        */
    export interface IWPSearchEditForm extends IWPListEditForm<IWPSearchCfg, IWPSearchInfo> { }
}

declare module 'gd-sprest-bs/webparts/types/wpTabs' {
    import { IWebPart, IWebPartProps } from "gd-sprest-bs/webparts/types/wp";
    
    /**
        * WebPart Tabs
        */
    export const WPTabs: (props: IWPTabsProps) => IWPTabs;
    
    /**
        * WebPart Tabs
        */
    export interface IWPTabs extends IWebPart { }
    
    /**
        * WebPart Tabs Properties
        */
    export interface IWPTabsProps extends IWebPartProps {
            type?: number;
    }
    
    /**
        * WebPart Tab Types
        */
    export const WPTabTypes: {
            Pillars: number;
            Tabs: number;
    }
}

declare module 'gd-sprest-bs/webparts/types/wpTaxonomy' {
    import { Helper } from "gd-sprest";
    import { IWebPart, IWebPartInfo, IWebPartProps, IWebPartCfg, IWebPartEditForm } from "gd-sprest-bs/webparts/types/wp";
    
    /**
        * Taxonomy WebPart
        */
    export const WPTaxonomy: (props: IWPTaxonomyProps) => IWPTaxonomy;
    
    /**
        * Taxonomy WebPart
        */
    export interface IWPTaxonomy extends IWebPart<IWPTaxonomyCfg, IWPTaxonomyInfo> { }
    
    /**
        * Taxonomy WebPart Information
        */
    export interface IWPTaxonomyInfo extends IWebPartInfo<IWPTaxonomyCfg> { }
    
    /**
        * Taxonomy WebPart Properties
        */
    export interface IWPTaxonomyProps extends IWebPartProps<IWPTaxonomyInfo, IWPTaxonomyEditForm> {
            /** The on render term set event. */
            onRenderTermSet?: (wpInfo: IWPTaxonomyInfo, termSet: Helper.Types.ITerm) => void;
    
            /** The on render term sets event. */
            onRenderTermSets?: (wpInfo: IWPTaxonomyInfo, termSets: Array<Helper.Types.ITermSetInfo>) => void;
    
            /** The on render term set terms event. */
            onRenderTermSetTerms?: (wpInfo: IWPTaxonomyInfo, terms: Array<Helper.Types.ITermInfo>) => void;
    }
    
    /**
        * Taxonomy WebPart Configuration
        */
    export interface IWPTaxonomyCfg extends IWebPartCfg {
            /** The term group id. */
            TermGroupId?: string;
    
            /** The term group name. */
            TermGroupName?: string;
    
            /** The term set id. */
            TermSetId?: string;
    
            /** The term set name */
            TermSetName?: string;
    
            /** The term set term id. */
            TermSetTermId?: string;
    
            /** The term set term name */
            TermSetTermName?: string;
    }
    
    /**
        * Taxonomy WebPart Edit Form
        */
    export interface IWPTaxonomyEditForm extends IWebPartEditForm<IWPTaxonomyCfg, IWPTaxonomyInfo> {
            /** The term group changed event. */
            onTermGroupChanged?: (wpInfo: IWPTaxonomyInfo, termGroupInfo?: ITermGroupInfo) => void;
    
            /** The term set changed event. */
            onTermSetChanged?: (wpInfo: IWPTaxonomyInfo, termSetInfo?: ITermInfo) => void;
    
            /** The term set term changed event. */
            onTermSetTermChanged?: (wpInfo: IWPTaxonomyInfo, termInfo?: ITermInfo) => void;
    
            /** Flag to display the term set terms. */
            showTermSetTerms?: boolean;
    }
    
    /**
        * Term Group Info
        */
    interface ITermGroupInfo {
            id: string;
            name: string;
    }
    
    /**
        * Term Info
        */
    interface ITermInfo {
            id: string;
            name: string;
    }
}

