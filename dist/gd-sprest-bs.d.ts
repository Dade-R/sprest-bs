// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../gd-bs
//   ../gd-sprest
//   ../gd-bs/@types/components

declare module 'gd-sprest-bs' {
    export * from "gd-bs";
    export * from "gd-sprest";
    
    import * as Components from "gd-sprest-bs/components";
    import * as WebParts from "gd-sprest-bs/webparts";
    export {
        Components,
        WebParts
    }
    
    import { IRESTBS } from "gd-sprest-bs/rest";
    export const $REST: IRESTBS;
}

declare module 'gd-sprest-bs/components' {
    export * from "gd-bs/@types/components";
    export * from "gd-sprest-bs/components/datetime";
    export * from "gd-sprest-bs/components/field";
    export * from "gd-sprest-bs/components/listForm";
    export * from "gd-sprest-bs/components/listFormDialog";
    export * from "gd-sprest-bs/components/peoplePicker";
    
    import { IFormControlTypes as Parent } from "gd-bs/@types/components";
    export interface IFormControlTypes extends Parent {
        PeoplePicker
    }
    export const FormControlTypes: IFormControlTypes;
}

declare module 'gd-sprest-bs/webparts' {
    export * from "gd-sprest-bs/webparts/helper";
    export * from "gd-sprest-bs/webparts/wp";
    export * from "gd-sprest-bs/webparts/wpList";
    export * from "gd-sprest-bs/webparts/wpListFields";
    export * from "gd-sprest-bs/webparts/wpSearch";
    export * from "gd-sprest-bs/webparts/wpTabs";
    export * from "gd-sprest-bs/webparts/wpTaxonomy";
}

declare module 'gd-sprest-bs/rest' {
    import { IconTypes, Icons } from "gd-bs";
    import { IREST } from "gd-sprest";
    import * as Components from "gd-sprest-bs/components";
    import * as WebParts from "gd-sprest-bs/webparts";
    
    /**
      * $REST Bootstrap Library
      */
    export interface IRESTBS extends IREST {
        jQuery: any,
        Components,
        Icons, IconTypes,
        WebParts
    }
}

declare module 'gd-sprest-bs/components/datetime' {
    import { Components } from "gd-bs";
    
    /**
        * Date/Time
        */
    export const DateTime: (props: IDateTimeProps) => IDateTime
    
    /**
        * Date/Time
        */
    export interface IDateTime {
            /** The date/time picker element. */
            el: HTMLDivElement;
    
            /** Method to get the value. */
            getValue: () => string;
    
            /** Method to toggle the menu. */
            toggle: () => void;
    }
    
    /**
        * Date/Time Props
        */
    export interface IDateTimeProps {
            /** The class name to apply to the element. */
            className?: string;
    
            /** The element to render the form to. */
            el?: Element;
    
            /** The date/time label. */
            label?: string;
    
            /** Flag to display the time. */
            showTime?: boolean;
    
            /** The date/time value. */
            value?: string;
    }
}

declare module 'gd-sprest-bs/components/field' {
    import { Helper, Types } from "gd-sprest";
    import { Components } from "gd-bs";
    
    /**
        * Field
        */
    export const Field: (props: IFieldProps) => IField;
    
    /**
        * Field
        */
    export interface IField {
            control: Components.IFormControl;
            controlProps: Components.IFormControlProps;
            getValue: () => IFieldValue;
            isValid: () => boolean;
    }
    
    /**
        * Field Properties
        */
    export interface IFieldProps {
            controlMode?: number;
            errorMessage?: string;
            field: Types.SP.Field;
            listInfo: Helper.IListFormResult;
            onError?: (msg: string) => void;
            onValidate?: (field: Types.SP.Field, control: Components.IFormControl) => boolean;
            value?: any;
    }
    
    /**
        * Field Value
        */
    export interface IFieldValue {
            name: string;
            value: any;
    }
}

declare module 'gd-sprest-bs/components/listForm' {
    import { Helper, Types } from "gd-sprest";
    import { Components } from "gd-bs";
    
    /**
        * List Form
        */
    export const ListForm: IListForm;
    
    /**
        * List Form
        */
    export interface IListForm extends Helper.IListForm {
            /**
                * Method to render the display form template.
                * @param props - The display form properties.
                */
            renderDisplayForm(props: IListFormDisplayProps);
    
            /**
                * Method to render the edit/new form.
                * @param props - The edit/new form properties.
                */
            renderEditForm(props: IListFormEditProps);
    }
    
    /**
        * List Form Attachments Properties
        */
    export interface IListFormAttachmentsProps {
            /** The element to render the form to. */
            el: Element;
    
            /** The list form information. */
            info: Helper.IListFormResult;
    
            /** The item attachment saved event. */
            onSave?: (info: Helper.IListFormResult) => void;
    }
    
    /**
        * List Form Display Properties
        */
    export interface IListFormDisplayProps extends Helper.IListFormDisplayProps {
            /** The control rendered event. */
            onControlRendered?: (control: Components.IFormControl) => void | Promise<Components.IFormControl>;
    
            /** The control rendering event. */
            onControlRendering?: (control: Components.IFormControlProps) => void | Promise<Components.IFormControlProps>;
    
            /** The error event. */
            onError?: (msg?: string) => void;
    
            /** The list form rows. */
            template?: Array<Components.IFormRow>;
    }
    
    /**
        * List Form Edit
        */
    export interface IListFormEdit {
            /** The element to render the form to. */
            el: HTMLFormElement;
    
            /** Method to get the form values */
            getValues(): { [key: string]: any }
    
            /** Method to determine if the field is valid */
            isValid(): boolean;
    
            /** Method to save the form. */
            save(): PromiseLike<Types.SP.ListItem>;
    }
    
    /**
        * List Form Edit Properties
        */
    export interface IListFormEditProps extends IListFormDisplayProps, Helper.IListFormEditProps {
            /** The form saving event. */
            onSaving?: (item: any) => void | PromiseLike<any>;
    
            /** The form validating event. */
            onValidate?: (field: Types.SP.Field, control: Components.IFormControl) => boolean;
    }
}

declare module 'gd-sprest-bs/components/listFormDialog' {
    import { Components } from "gd-bs";
    import { Helper, Types } from "gd-sprest";
    
    /**
        * List Form Dialog
        */
    export const ListFormDialog: (props: IListFormDialogProps) => IListFormDialog;
    
    /**
        * List Form Dialog
        */
    export interface IListFormDialog extends Components.IModal {
            /** Method to save the form. */
            saveForm: () => PromiseLike<Types.SP.ListItem>;
    }
    
    /**
        * List Form Dialog Properties
        */
    export interface IListFormDialogProps extends Helper.IListFormProps {
            /** The form actions. */
            actions?: Components.IToolbarProps;
    
            /** The form control mode. */
            controlMode?: number;
    
            /** The element to render the field to. */
            el: Element | HTMLElement;
    
            /** The item. */
            item?: any;
    
            /** The modal dialog properties. */
            modalProps?: Components.IModalProps;
    
            /** The control rendered event. */
            onControlRendered?: (control: Components.IFormControl) => void | Promise<Components.IFormControl>;
    
            /** The control rendering event. */
            onControlRendering?: (control: Components.IFormControlProps) => void | Promise<Components.IFormControlProps>;
    
            /** The form saving event. */
            onSaving?: (item: any) => void | PromiseLike<any>;
    
            /** The form saved event. */
            onSaved?: (item?: Types.SP.ListItem) => void;
    
            /** The list form rows. */
            template?: Array<Components.IFormRow>;
    
            /** True to display the modal by default. */
            visible?: boolean;
    }
}

declare module 'gd-sprest-bs/components/peoplePicker' {
    import { Types } from "gd-sprest";
    /**
        * People Picker
        */
    export const PeoplePicker: (props: IPeoplePickerProps) => IPeoplePicker;
    
    /**
        * People Picker
        */
    export interface IPeoplePicker {
            /** The people picker element. */
            el: HTMLElement;
    
            /** Returns the selected users. */
            getValue: () => Array<Types.SP.User | Types.SP.Group>;
    
            /** Sets the selected users by id or people picker user object. */
            setValue: (selectedUsers: Array<string | number | Types.IPeoplePickerUser>) => void;
    }
    
    /**
        * People Picker Properties
        */
    export interface IPeoplePickerProps {
            /** True, to include groups in the results. */
            allowGroups?: boolean;
    
            /** The class name to apply to the element. */
            className?: string;
    
            /** The element to render the form to. */
            el?: Element;
    
            /** The label. */
            label?: string;
    
            /** True to search the local users first. */
            searchLocal?: boolean;
    
            /** The selected users. */
            value?: string | number | Types.IPeoplePickerUser | Array<string | number | Types.IPeoplePickerUser>;
    }
}

declare module 'gd-sprest-bs/webparts/helper' {
    import { Components } from "gd-bs";
    import { IWebPartInfo } from "gd-sprest-bs/webparts/wp";
    
    /**
        * Helper Methods
        */
    export const Helper: IHelper;
    
    /**
        * Helper Methods
        */
    export interface IHelper {
            /**
                * Method to get the webpart
                * @param wpId - The webpart id.
                */
            getWebPart(wpId: string): PromiseLike<IWPInstance>;
    
            /**
                * Method to get the webpart id for a specified element
                * @param el - The target element.
                */
            getWebPartId(el: HTMLElement): string;
    
            /**
                * Method to render the edit form.
                * @param wpInfo - The webpart information.
                * @param formControls - The form controls to render.
                */
            renderEditForm: (wpInfo: IWebPartInfo, formControls: Array<Components.IFormControlProps>) => Components.IForm;
    
            /**
                * Method to save the webpart configuration.
                * This method may execute a postback, based on the page type.
                * @param wpId - The webpart id.
                * @param cfgId: The configuration element id.
                * @param wpCfg - The webpart configuration.
                */
            saveConfiguration(wpId: string, cfgId?: string, wpCfg?: any): PromiseLike<void>;
    
            /**
                * Method to update the configuration element
                * @param cfgId: The configuration element id.
                * @param elTarget - The target element.
                * @param wpCfg - The webpart configuration.
                */
            updateConfigurationInElement(cfgId: string, elTarget: HTMLInputElement, wpCfg);
    
            /**
                * Method to update the webpart content elements
                * @param wpId - The webpart id.
                * @param cfgId: The configuration element id.
                * @param wpCfg - The webpart configuration.
                */
            updateWebPartContentElements(wpId: string, cfgId?: string, wpCfg?: any): boolean;
    }
    
    /**
        * WebPart Information
        */
    export interface IWPInstance {
            Context: any;
            Properties: any;
            WebPart: any;
            WebPartDefinition: any;
    }
}

declare module 'gd-sprest-bs/webparts/wp' {
    import { Components } from "gd-bs";
    
    /**
        * Web Part
        */
    export const WebPart: (props: IWebPartProps) => IWebPart;
    
    /**
        * WebPart
        */
    export interface IWebPart<IWPCfg = IWebPartCfg, IWPInfo = IWebPartInfo> {
            /** The webpart configuration. */
            cfg: IWPCfg;
    
            /** The webpart information. */
            info: IWPInfo;
    
            /** Method to update the edit form. */
            updateEditForm?: (formControls: Array<Components.IFormControl>) => void;
    }
    
    /**
        * WebPart Information
        */
    export interface IWebPartInfo<IWPCfg = IWebPartCfg> {
            /** The configuration */
            cfg: IWPCfg;
    
            /** The element to render the webpart to */
            el: HTMLElement;
    
            /** The webpart id */
            wpId: string;
    }
    
    /**
        * WebPart Object
        */
    export interface IWebPartObject {
            /** The JSOM context object */
            Context: any;
    
            /** The webpart properties object */
            Properties: any;
    
            /** The webpart id */
            WebPartId: string;
    
            /** The webpart html element */
            WebPart: HTMLElement;
    
            /** The webpart definition object */
            WebPartDefinition: any;
    }
    
    /**
        * WebPart Properties
        */
    export interface IWebPartProps<IWPInfo = IWebPartInfo, IWPEditForm = IWebPartEditForm> {
            /** The optional configuration element */
            cfgElementId?: string;
    
            /** The class name. */
            className?: string;
    
            /** The target element id to render the webpart to */
            elementId?: string;
    
            /** The edit form */
            editForm?: IWPEditForm;
    
            /** The optional help link properties */
            helpProps?: {
                    /** The link title */
                    title?: string;
    
                    /** The link url */
                    url: string;
            };
    
            /** The post render event */
            onPostRender?: (wp: IWPInfo, ...args) => void;
    
            /** The render event triggered when the page is in 'Display' mode */
            onRenderDisplay?: (wp: IWPInfo) => any;
    
            /** The render event triggered when the page is in 'Edit' mode */
            onRenderEdit?: (wp: IWPInfo) => any;
    
            /** The webpart class name */
            wpClassName?: string;
    }
    
    /**
        * WebPart Configuration
        */
    export const WPCfg: (cfg: IWebPartCfg, props: IWebPartProps) => {
            /** Method to render the edit form. */
            renderForm?: (formControls: Array<Components.IFormControl>) => void;
    };
    
    /**
        * WebPart Configuration
        */
    export interface IWebPartCfg {
            /** The webpart id */
            WebPartId?: string;
    }
    
    /**
        * WebPart Edit Form
        */
    export interface IWebPartEditForm<IWPCfg = IWebPartCfg, IWPInfo = IWebPartInfo> {
            /** The form action buttons displayed in the footer of the modal. */
            actions?: Array<Components.IButtonProps>;
    
            /** The render form event. */
            onRenderForm?: (wpInfo?: IWPInfo) => Array<Components.IFormControlProps> | PromiseLike<Array<Components.IFormControlProps>> | void;
    
            /** The save event. */
            onSave?: (wpCfg?: IWPCfg, form?: Components.IForm) => IWPCfg;
    
            /** True to hide the save button. */
            showSaveButton?: boolean;
    }
}

declare module 'gd-sprest-bs/webparts/wpList' {
    import { Components } from "gd-bs";
    import { Types } from "gd-sprest";
    import { IWebPart, IWebPartInfo, IWebPartProps, IWebPartCfg, IWebPartEditForm } from "gd-sprest-bs/webparts/wp";
    
    /**
        * List WebPart
        */
    export const WPList: (props: IWPListProps) => IWPList;
    
    /**
        * List WebPart Edit Form
        */
    export const WPListEditForm: (props: IWPListEditForm) => IWPListEditForm;
    
    /**
        * List WebPart
        */
    export interface IWPList<IListCfg = IWPListCfg, IListInfo = IWPListInfo> extends IWebPart<IListCfg, IListInfo> { }
    
    /**
        * List WebPart Information
        */
    export interface IWPListInfo<IListCfg = IWPListCfg> extends IWebPartInfo<IListCfg> { }
    
    /**
        * List WebPart Properties
        */
    export interface IWPListProps<IListInfo=IWPListInfo, IListEditForm=IWPListEditForm> extends IWebPartProps<IListInfo, IListEditForm> {
            /** The caml query. */
            camlQuery?: string;
    
            /** The odata query. */
            odataQuery?: Types.IODataQuery;
    
            /** The executing caml query event. */
            onExecutingCAMLQuery?: (wpInfo: IListInfo, caml: string) => string;
    
            /** The executing odata query event. */
            onExecutingODATAQuery?: (wpInfo: IListInfo, odata: Types.IODataQuery) => Types.IODataQuery;
    
            /** The on render items event. */
            onRenderItems?: (wpInfo: IListInfo, items: Array<Types.SP.IListItemQuery | Types.SP.ListItem>) => void;
    }
    
    /**
        * List WebPart Configuration
        */
    export interface IWPListCfg extends IWebPartCfg {
            /** The list name */
            ListName?: string;
    
            /** The relative web url */
            WebUrl?: string;
    }
    
    /**
        * List WebPart Edit Form
        */
    export interface IWPListEditForm<IListCfg = IWPListCfg, IListInfo = IWPListInfo> extends IWebPartEditForm<IListCfg, IListInfo> {
            /** The odata list query. */
            listQuery?: Types.IODataQuery;
    
            /** The list changed event. */
            onListChanged?: (wpInfo: IListInfo, list?: Types.SP.IListQuery | Types.SP.List) => Array<Components.IFormControlProps> | PromiseLike<Array<Components.IFormControlProps>> | void;
    
            /** The lists loaded event. */
            onListsLoaded?: (wpInfo: IListInfo, lists?: Array<Types.SP.IListQuery | Types.SP.List>) => Array<Types.SP.IListQuery | Types.SP.List>;
    
            /** The render form event. */
            onRenderForm?: (wpInfo: IListInfo, list?: Types.SP.IListQuery | Types.SP.List) => Array<Components.IFormControlProps> | PromiseLike<Array<Components.IFormControlProps>> | void;
    }
}

declare module 'gd-sprest-bs/webparts/wpListFields' {
    import { Components } from "gd-bs";
    import { Types } from "gd-sprest";
    import { IWPList, IWPListCfg, IWPListEditForm, IWPListInfo, IWPListProps } from "gd-sprest-bs/webparts/wpList";
    
    /**
        * List Fields WebPart
        */
    export const WPListFields: (props: IWPListFieldsProps) => IWPListFields;
    
    /**
        * List Fields WebPart Edit Form
        */
    export const WPListFieldsEditForm: (props: IWPListFieldsEditForm) => IWPListFieldsEditForm;
    
    /**
        * List Fields WebPart
        */
    export interface IWPListFields<IListFieldsCfg = IWPListFieldsCfg, IListFieldsInfo = IWPListFieldsInfo> extends IWPList<IListFieldsCfg, IListFieldsInfo> { }
    
    /**
        * List Fields WebPart Information
        */
    export interface IWPListFieldsInfo<IListFieldsCfg = IWPListFieldsCfg> extends IWPListInfo<IListFieldsCfg> { }
    
    /**
        * List Fields WebPart Properties
        */
    export interface IWPListFieldsProps<IListFieldsInfo = IWPListFieldsInfo, IListFieldsEditForm = IWPListFieldsEditForm> extends IWPListProps<IListFieldsInfo, IListFieldsEditForm> { }
    
    /**
        * WebPart Configuration List Field
        */
    export interface IWPListField {
            // The internal field name
            Name: string;
    
            // The display name of the field
            Title: string
    }
    
    /**
        * List Fields WebPart Configuration
        */
    export interface IWPListFieldsCfg extends IWPListCfg {
            /** The selected fields */
            Fields: Array<IWPListField>;
    }
    
    /**
        * List Fields WebPart Edit Form
        */
    export interface IWPListFieldsEditForm<IListFieldsCfg = IWPListFieldsCfg, IListFieldsInfo = IWPListFieldsInfo> extends IWPListEditForm<IListFieldsCfg, IListFieldsInfo> { }
}

declare module 'gd-sprest-bs/webparts/wpSearch' {
    import { Types } from "gd-sprest";
    import { IWPList, IWPListInfo, IWPListProps } from "gd-sprest-bs/webparts/wpList";
    import { IWPListCfg, IWPListEditForm } from "gd-sprest-bs/webparts/wpList";
    
    /**
        * Search WebPart
        */
    export const WPSearch: (props: IWPListProps) => IWPSearch;
    
    /**
        * Search WebPart Edit Form
        */
    export const WPSearchEditForm: (props: IWPSearchEditForm) => IWPSearchEditForm;
    
    /**
        * Search WebPart
        */
    export interface IWPSearch extends IWPList<IWPSearchCfg, IWPSearchInfo> {
            /** The filter items method. */
            filterItems: (filterText: string) => Array<Types.SP.IListItemQuery | Types.SP.ListItem>;
    }
    
    /**
        * Search WebPart Information
        */
    export interface IWPSearchInfo extends IWPListInfo<IWPSearchCfg> { }
    
    /**
        * Search WebPart Properties
        */
    export interface IWPSearchProps extends IWPListProps<IWPSearchInfo, IWPSearchEditForm> {
            /** The internal field names to be used for search. These will be appended to the configuration fields. */
            searchFields?: Array<{ name: string, type: string }>;
    }
    
    /**
        * Search WebPart Configuration
        */
    export interface IWPSearchCfg extends IWPListCfg {
            /** The searchable fields. */
            Fields: Array<{ name: string, type: string }>;
    }
    
    /**
        * Search WebPart Edit Form
        */
    export interface IWPSearchEditForm extends IWPListEditForm<IWPSearchCfg, IWPSearchInfo> { }
}

declare module 'gd-sprest-bs/webparts/wpTabs' {
    import { Components } from "gd-bs";
    import { IWebPart, IWebPartProps } from "gd-sprest-bs/webparts/wp";
    
    /**
        * WebPart Tabs
        */
    export const WPTabs: (props: IWPTabsProps) => IWPTabs;
    
    /**
        * WebPart Tab Types
        */
    export const WPTabTypes: IWPTabTypes;
    
    /**
        * WebPart Tabs
        */
    export interface IWPTabs extends IWebPart {
            getNav(): Components.INav;
            getTabs(): Array<HTMLElement>;
    }
    
    /**
        * WebPart Tabs Properties
        */
    export interface IWPTabsProps extends IWebPartProps {
            onClick?: (el?: HTMLElement) => void;
            type?: number;
    }
    
    /**
        * WebPart Tab Types
        */
    export type IWPTabTypes = {
            Pillars: number;
            Tabs: number;
    }
}

declare module 'gd-sprest-bs/webparts/wpTaxonomy' {
    import { Components } from "gd-bs"
    import { Helper } from "gd-sprest";
    import { IWebPart, IWebPartInfo, IWebPartProps, IWebPartCfg, IWebPartEditForm } from "gd-sprest-bs/webparts/wp";
    
    /**
        * Taxonomy WebPart
        */
    export const WPTaxonomy: (props: IWPTaxonomyProps) => IWPTaxonomy;
    
    /**
        * Taxonomy WebPart Edit Form
        */
    export const WPTaxonomyEditForm: (props: IWPTaxonomyEditForm) => IWPTaxonomyEditForm;
    
    /**
        * Taxonomy WebPart
        */
    export interface IWPTaxonomy extends IWebPart<IWPTaxonomyCfg, IWPTaxonomyInfo> { }
    
    /**
        * Taxonomy WebPart Information
        */
    export interface IWPTaxonomyInfo extends IWebPartInfo<IWPTaxonomyCfg> { }
    
    /**
        * Taxonomy WebPart Properties
        */
    export interface IWPTaxonomyProps extends IWebPartProps<IWPTaxonomyInfo, IWPTaxonomyEditForm> {
            /** The on render term set event. */
            onRenderTermSet?: (wpInfo: IWPTaxonomyInfo, termSet: Helper.ITerm) => void;
    
            /** The on render term sets event. */
            onRenderTermSets?: (wpInfo: IWPTaxonomyInfo, termSets: Array<Helper.ITermSetInfo>) => void;
    
            /** The on render term set terms event. */
            onRenderTermSetTerms?: (wpInfo: IWPTaxonomyInfo, terms: Array<Helper.ITermInfo>) => void;
    }
    
    /**
        * Taxonomy WebPart Configuration
        */
    export interface IWPTaxonomyCfg extends IWebPartCfg {
            /** The term group id. */
            TermGroupId?: string;
    
            /** The term group name. */
            TermGroupName?: string;
    
            /** The term set id. */
            TermSetId?: string;
    
            /** The term set name */
            TermSetName?: string;
    
            /** The term set term id. */
            TermSetTermId?: string;
    
            /** The term set term name */
            TermSetTermName?: string;
    }
    
    /**
        * Taxonomy WebPart Edit Form
        */
    export interface IWPTaxonomyEditForm extends IWebPartEditForm<IWPTaxonomyCfg, IWPTaxonomyInfo> {
            /** The term group changed event. */
            onTermGroupChanged?: (wpInfo: IWPTaxonomyInfo, termGroupInfo?: ITermGroupInfo) => void;
    
            /** The term group loaded event. */
            onTermGroupsLoaded?: (wpInfo: IWPTaxonomyInfo, termGroups: Array<Components.IDropdownItem>) => Array<Components.IDropdownItem>;
    
            /** The term set changed event. */
            onTermSetChanged?: (wpInfo: IWPTaxonomyInfo, termSetInfo?: ITermInfo) => void;
    
            /** The term set loaded event. */
            onTermSetsLoaded?: (wpInfo: IWPTaxonomyInfo, termSets?: Array<Components.IDropdownItem>) => Array<Components.IDropdownItem>;
    
            /** The term set term changed event. */
            onTermSetTermChanged?: (wpInfo: IWPTaxonomyInfo, termInfo?: ITermInfo) => void;
    
            /** The term set terms loaded event. */
            onTermSetTermsLoaded?: (wpInfo: IWPTaxonomyInfo, terms?: Array<Components.IDropdownItem>) => Array<Components.IDropdownItem>;
    
            /** Flag to display the term set terms. */
            showTermSetTerms?: boolean;
    }
    
    /**
        * Term Group Info
        */
    interface ITermGroupInfo {
            id: string;
            name: string;
    }
    
    /**
        * Term Info
        */
    interface ITermInfo {
            id: string;
            name: string;
    }
}

