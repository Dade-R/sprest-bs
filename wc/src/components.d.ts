/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';




declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface BsAlert {
      'className': string;
      'content': string;
      'header': string;
      'isDismissible': boolean;
      'type': number;
    }

    interface BsBadge {
      'className': string;
      'content': string;
      'header': string;
      'href': string;
      'isPill': boolean;
      'type': number;
    }

    interface BsBreadcrumb {
      'className': string;
      'items': string;
    }

    interface BsButton {
      'badgeType': number;
      'badgeValue': string;
      'className': string;
      'controls': Array<string>;
      'id': string;
      'isBlock': boolean;
      'isDisabled': boolean;
      'isExpanded': boolean;
      'isLarge': boolean;
      'isOutline': boolean;
      'isSmall': boolean;
      'target': string;
      'text': string;
      'toggle': string;
      'type': number;
    }

    interface BsButtongroup {
      'buttonType': number;
      'buttons': string;
      'className': string;
      'id': string;
      'isLarge': boolean;
      'isSmall': boolean;
      'isVertical': boolean;
      'label': string;
    }
  }


    interface HTMLBsAlertElement extends StencilComponents.BsAlert, HTMLStencilElement {}

    var HTMLBsAlertElement: {
      prototype: HTMLBsAlertElement;
      new (): HTMLBsAlertElement;
    };
    

    interface HTMLBsBadgeElement extends StencilComponents.BsBadge, HTMLStencilElement {}

    var HTMLBsBadgeElement: {
      prototype: HTMLBsBadgeElement;
      new (): HTMLBsBadgeElement;
    };
    

    interface HTMLBsBreadcrumbElement extends StencilComponents.BsBreadcrumb, HTMLStencilElement {}

    var HTMLBsBreadcrumbElement: {
      prototype: HTMLBsBreadcrumbElement;
      new (): HTMLBsBreadcrumbElement;
    };
    

    interface HTMLBsButtonElement extends StencilComponents.BsButton, HTMLStencilElement {}

    var HTMLBsButtonElement: {
      prototype: HTMLBsButtonElement;
      new (): HTMLBsButtonElement;
    };
    

    interface HTMLBsButtongroupElement extends StencilComponents.BsButtongroup, HTMLStencilElement {}

    var HTMLBsButtongroupElement: {
      prototype: HTMLBsButtongroupElement;
      new (): HTMLBsButtongroupElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'bs-alert': JSXElements.BsAlertAttributes;
    'bs-badge': JSXElements.BsBadgeAttributes;
    'bs-breadcrumb': JSXElements.BsBreadcrumbAttributes;
    'bs-button': JSXElements.BsButtonAttributes;
    'bs-buttonGroup': JSXElements.BsButtongroupAttributes;
    }
  }

  namespace JSXElements {

    export interface BsAlertAttributes extends HTMLAttributes {
      'className'?: string;
      'content'?: string;
      'header'?: string;
      'isDismissible'?: boolean;
      'type'?: number;
    }

    export interface BsBadgeAttributes extends HTMLAttributes {
      'className'?: string;
      'content'?: string;
      'header'?: string;
      'href'?: string;
      'isPill'?: boolean;
      'type'?: number;
    }

    export interface BsBreadcrumbAttributes extends HTMLAttributes {
      'className'?: string;
      'items'?: string;
    }

    export interface BsButtonAttributes extends HTMLAttributes {
      'badgeType'?: number;
      'badgeValue'?: string;
      'className'?: string;
      'controls'?: Array<string>;
      'id'?: string;
      'isBlock'?: boolean;
      'isDisabled'?: boolean;
      'isExpanded'?: boolean;
      'isLarge'?: boolean;
      'isOutline'?: boolean;
      'isSmall'?: boolean;
      'target'?: string;
      'text'?: string;
      'toggle'?: string;
      'type'?: number;
    }

    export interface BsButtongroupAttributes extends HTMLAttributes {
      'buttonType'?: number;
      'buttons'?: string;
      'className'?: string;
      'id'?: string;
      'isLarge'?: boolean;
      'isSmall'?: boolean;
      'isVertical'?: boolean;
      'label'?: string;
    }
  }

  interface HTMLElementTagNameMap {
    'bs-alert': HTMLBsAlertElement
    'bs-badge': HTMLBsBadgeElement
    'bs-breadcrumb': HTMLBsBreadcrumbElement
    'bs-button': HTMLBsButtonElement
    'bs-buttonGroup': HTMLBsButtongroupElement
  }

  interface ElementTagNameMap {
    'bs-alert': HTMLBsAlertElement;
    'bs-badge': HTMLBsBadgeElement;
    'bs-breadcrumb': HTMLBsBreadcrumbElement;
    'bs-button': HTMLBsButtonElement;
    'bs-buttonGroup': HTMLBsButtongroupElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;