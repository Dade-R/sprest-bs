/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';


export namespace Components {
  interface BsAccordion {
    'className': string;
    'id': string;
  }
  interface BsAlert {
    'className': string;
    'content': string;
    'header': string;
    'isDismissible': boolean;
    'type': number;
  }
  interface BsBadge {
    'className': string;
    'content': string;
    'header': string;
    'href': string;
    'isPill': boolean;
    'type': number;
  }
  interface BsBreadcrumb {
    'className': string;
  }
  interface BsButton {
    'className': string;
    'controls': Array<string>;
    'data': any;
    'href': string;
    'id': string;
    'isBlock': boolean;
    'isDisabled': boolean;
    'isExpanded': boolean;
    'isLarge': boolean;
    'isLink': boolean;
    'isOutline': boolean;
    'isSmall': boolean;
    'target': string;
    'text': string;
    'toggle': string;
    'trigger': string;
    'type': number;
  }
  interface BsButtonGroup {
    'buttonType': number;
    'className': string;
    'id': string;
    'isLarge': boolean;
    'isSmall': boolean;
    'isVertical': boolean;
    'label': string;
  }
  interface BsCard {
    'className': string;
    'footer': string;
    'header': string;
    'imgBottom': object;
    'imgTop': object;
  }
  interface BsCardGroup {
    'className': string;
  }
  interface BsCarousel {
    'className': string;
    'enableControls': boolean;
    'enableCrossfade': boolean;
    'enableIndicators': boolean;
    'id': string;
  }
  interface BsCheckboxGroup {
    'className': string;
    'colSize': number;
    'hideLabel': boolean;
    'label': string;
    'multi': boolean;
    'type': number;
  }
  interface BsCollapse {
    'className': string;
    'content': string;
    'id': string;
    'isMulti': boolean;
  }
  interface BsDropdown {
    'className': string;
    'dropLeft': boolean;
    'dropRight': boolean;
    'dropUp': boolean;
    'formFl': boolean;
    'id': string;
    'isSplit': boolean;
    'label': string;
    'menuOnly': boolean;
    'multi': boolean;
    'setLabelToValue': boolean;
    'type': number;
    'value': string;
  }
  interface BsForm {}
  interface BsInputGroup {
    'appendedLabel': string;
    'className': string;
    'description': string;
    'id': string;
    'isLarge': boolean;
    'isPlainText': boolean;
    'isReadonly': boolean;
    'isSmall': boolean;
    'label': string;
    'placeholder': string;
    'prependedLabel': string;
    'rows': number;
    'type': number;
    'value': string;
  }
  interface BsJumbotron {
    'className': string;
    'content': string;
    'isFluid': boolean;
    'lead': string;
  }
  interface BsListGroup {
    'className': string;
    'colWidth': number;
    'enableFade': boolean;
    'isFlush': boolean;
    'isTabs': boolean;
  }
  interface BsModal {
    'body': string;
    'className': string;
    'disableFade': boolean;
    'footer': string;
    'hideCloseButton': boolean;
    'id': string;
    'isCentered': boolean;
    'isLarge': boolean;
    'isSmall': boolean;
  }
  interface BsNav {
    'className': string;
    'enableFade': boolean;
    'enableFill': boolean;
    'id': string;
    'isJustified': boolean;
    'isPills': boolean;
    'isTabs': boolean;
    'isVertical': boolean;
  }
  interface BsNavbar {
    'brand': string;
    'brandUrl': string;
    'className': string;
    'enableSearch': boolean;
    'id': string;
    'type': number;
  }
  interface BsPagination {
    'alignment': number;
    'className': string;
    'icon': string;
    'isLarge': boolean;
    'isSmall': boolean;
    'label': string;
    'numberOfPages': number;
  }
  interface BsPanel {
    'className': string;
    'type': number;
  }
  interface BsPopover {
    'className': string;
    'isDismissible': boolean;
    'type': number;
  }
  interface BsProgress {
    'className': string;
    'isAnimated': boolean;
    'isStriped': boolean;
    'label': string;
    'max': number;
    'min': number;
    'size': number;
  }
  interface BsProgressGroup {
    'className': string;
    'isMultiple': boolean;
  }
  interface BsSpinner {
    'className': string;
    'isGrowing': boolean;
    'isSmall': boolean;
    'text': string;
    'type': number;
  }
  interface BsTable {
    'className': string;
  }
  interface BsToast {
    'bodyText': string;
    'className': string;
    'closeButtonHidden': boolean;
    'closeButtonText': boolean;
    'headerImgClass': string;
    'headerImgSrc': string;
    'headerText': string;
  }
  interface BsToolbar {
    'className': string;
    'spacing': number;
  }
  interface BsTooltip {
    'className': string;
    'type': number;
  }
  interface BsWebpart {
    'cfgElementId': string;
    'className': string;
    'elementId': string;
    'wpClassName': string;
  }
  interface BsWebpartList {
    'camlQuery': string;
    'cfgElementId': string;
    'className': string;
    'elementId': string;
    'wpClassName': string;
  }
  interface BsWebpartSearch {
    'camlQuery': string;
    'cfgElementId': string;
    'className': string;
    'elementId': string;
    'wpClassName': string;
  }
  interface BsWebpartTabs {
    'cfgElementId': string;
    'className': string;
    'elementId': string;
    'type': number;
    'wpClassName': string;
  }
  interface BsWebpartTaxonomy {
    'cfgElementId': string;
    'className': string;
    'elementId': string;
    'wpClassName': string;
  }
}

declare global {


  interface HTMLBsAccordionElement extends Components.BsAccordion, HTMLStencilElement {}
  var HTMLBsAccordionElement: {
    prototype: HTMLBsAccordionElement;
    new (): HTMLBsAccordionElement;
  };

  interface HTMLBsAlertElement extends Components.BsAlert, HTMLStencilElement {}
  var HTMLBsAlertElement: {
    prototype: HTMLBsAlertElement;
    new (): HTMLBsAlertElement;
  };

  interface HTMLBsBadgeElement extends Components.BsBadge, HTMLStencilElement {}
  var HTMLBsBadgeElement: {
    prototype: HTMLBsBadgeElement;
    new (): HTMLBsBadgeElement;
  };

  interface HTMLBsBreadcrumbElement extends Components.BsBreadcrumb, HTMLStencilElement {}
  var HTMLBsBreadcrumbElement: {
    prototype: HTMLBsBreadcrumbElement;
    new (): HTMLBsBreadcrumbElement;
  };

  interface HTMLBsButtonElement extends Components.BsButton, HTMLStencilElement {}
  var HTMLBsButtonElement: {
    prototype: HTMLBsButtonElement;
    new (): HTMLBsButtonElement;
  };

  interface HTMLBsButtonGroupElement extends Components.BsButtonGroup, HTMLStencilElement {}
  var HTMLBsButtonGroupElement: {
    prototype: HTMLBsButtonGroupElement;
    new (): HTMLBsButtonGroupElement;
  };

  interface HTMLBsCardElement extends Components.BsCard, HTMLStencilElement {}
  var HTMLBsCardElement: {
    prototype: HTMLBsCardElement;
    new (): HTMLBsCardElement;
  };

  interface HTMLBsCardGroupElement extends Components.BsCardGroup, HTMLStencilElement {}
  var HTMLBsCardGroupElement: {
    prototype: HTMLBsCardGroupElement;
    new (): HTMLBsCardGroupElement;
  };

  interface HTMLBsCarouselElement extends Components.BsCarousel, HTMLStencilElement {}
  var HTMLBsCarouselElement: {
    prototype: HTMLBsCarouselElement;
    new (): HTMLBsCarouselElement;
  };

  interface HTMLBsCheckboxGroupElement extends Components.BsCheckboxGroup, HTMLStencilElement {}
  var HTMLBsCheckboxGroupElement: {
    prototype: HTMLBsCheckboxGroupElement;
    new (): HTMLBsCheckboxGroupElement;
  };

  interface HTMLBsCollapseElement extends Components.BsCollapse, HTMLStencilElement {}
  var HTMLBsCollapseElement: {
    prototype: HTMLBsCollapseElement;
    new (): HTMLBsCollapseElement;
  };

  interface HTMLBsDropdownElement extends Components.BsDropdown, HTMLStencilElement {}
  var HTMLBsDropdownElement: {
    prototype: HTMLBsDropdownElement;
    new (): HTMLBsDropdownElement;
  };

  interface HTMLBsFormElement extends Components.BsForm, HTMLStencilElement {}
  var HTMLBsFormElement: {
    prototype: HTMLBsFormElement;
    new (): HTMLBsFormElement;
  };

  interface HTMLBsInputGroupElement extends Components.BsInputGroup, HTMLStencilElement {}
  var HTMLBsInputGroupElement: {
    prototype: HTMLBsInputGroupElement;
    new (): HTMLBsInputGroupElement;
  };

  interface HTMLBsJumbotronElement extends Components.BsJumbotron, HTMLStencilElement {}
  var HTMLBsJumbotronElement: {
    prototype: HTMLBsJumbotronElement;
    new (): HTMLBsJumbotronElement;
  };

  interface HTMLBsListGroupElement extends Components.BsListGroup, HTMLStencilElement {}
  var HTMLBsListGroupElement: {
    prototype: HTMLBsListGroupElement;
    new (): HTMLBsListGroupElement;
  };

  interface HTMLBsModalElement extends Components.BsModal, HTMLStencilElement {}
  var HTMLBsModalElement: {
    prototype: HTMLBsModalElement;
    new (): HTMLBsModalElement;
  };

  interface HTMLBsNavElement extends Components.BsNav, HTMLStencilElement {}
  var HTMLBsNavElement: {
    prototype: HTMLBsNavElement;
    new (): HTMLBsNavElement;
  };

  interface HTMLBsNavbarElement extends Components.BsNavbar, HTMLStencilElement {}
  var HTMLBsNavbarElement: {
    prototype: HTMLBsNavbarElement;
    new (): HTMLBsNavbarElement;
  };

  interface HTMLBsPaginationElement extends Components.BsPagination, HTMLStencilElement {}
  var HTMLBsPaginationElement: {
    prototype: HTMLBsPaginationElement;
    new (): HTMLBsPaginationElement;
  };

  interface HTMLBsPanelElement extends Components.BsPanel, HTMLStencilElement {}
  var HTMLBsPanelElement: {
    prototype: HTMLBsPanelElement;
    new (): HTMLBsPanelElement;
  };

  interface HTMLBsPopoverElement extends Components.BsPopover, HTMLStencilElement {}
  var HTMLBsPopoverElement: {
    prototype: HTMLBsPopoverElement;
    new (): HTMLBsPopoverElement;
  };

  interface HTMLBsProgressElement extends Components.BsProgress, HTMLStencilElement {}
  var HTMLBsProgressElement: {
    prototype: HTMLBsProgressElement;
    new (): HTMLBsProgressElement;
  };

  interface HTMLBsProgressGroupElement extends Components.BsProgressGroup, HTMLStencilElement {}
  var HTMLBsProgressGroupElement: {
    prototype: HTMLBsProgressGroupElement;
    new (): HTMLBsProgressGroupElement;
  };

  interface HTMLBsSpinnerElement extends Components.BsSpinner, HTMLStencilElement {}
  var HTMLBsSpinnerElement: {
    prototype: HTMLBsSpinnerElement;
    new (): HTMLBsSpinnerElement;
  };

  interface HTMLBsTableElement extends Components.BsTable, HTMLStencilElement {}
  var HTMLBsTableElement: {
    prototype: HTMLBsTableElement;
    new (): HTMLBsTableElement;
  };

  interface HTMLBsToastElement extends Components.BsToast, HTMLStencilElement {}
  var HTMLBsToastElement: {
    prototype: HTMLBsToastElement;
    new (): HTMLBsToastElement;
  };

  interface HTMLBsToolbarElement extends Components.BsToolbar, HTMLStencilElement {}
  var HTMLBsToolbarElement: {
    prototype: HTMLBsToolbarElement;
    new (): HTMLBsToolbarElement;
  };

  interface HTMLBsTooltipElement extends Components.BsTooltip, HTMLStencilElement {}
  var HTMLBsTooltipElement: {
    prototype: HTMLBsTooltipElement;
    new (): HTMLBsTooltipElement;
  };

  interface HTMLBsWebpartElement extends Components.BsWebpart, HTMLStencilElement {}
  var HTMLBsWebpartElement: {
    prototype: HTMLBsWebpartElement;
    new (): HTMLBsWebpartElement;
  };

  interface HTMLBsWebpartListElement extends Components.BsWebpartList, HTMLStencilElement {}
  var HTMLBsWebpartListElement: {
    prototype: HTMLBsWebpartListElement;
    new (): HTMLBsWebpartListElement;
  };

  interface HTMLBsWebpartSearchElement extends Components.BsWebpartSearch, HTMLStencilElement {}
  var HTMLBsWebpartSearchElement: {
    prototype: HTMLBsWebpartSearchElement;
    new (): HTMLBsWebpartSearchElement;
  };

  interface HTMLBsWebpartTabsElement extends Components.BsWebpartTabs, HTMLStencilElement {}
  var HTMLBsWebpartTabsElement: {
    prototype: HTMLBsWebpartTabsElement;
    new (): HTMLBsWebpartTabsElement;
  };

  interface HTMLBsWebpartTaxonomyElement extends Components.BsWebpartTaxonomy, HTMLStencilElement {}
  var HTMLBsWebpartTaxonomyElement: {
    prototype: HTMLBsWebpartTaxonomyElement;
    new (): HTMLBsWebpartTaxonomyElement;
  };
  interface HTMLElementTagNameMap {
    'bs-accordion': HTMLBsAccordionElement;
    'bs-alert': HTMLBsAlertElement;
    'bs-badge': HTMLBsBadgeElement;
    'bs-breadcrumb': HTMLBsBreadcrumbElement;
    'bs-button': HTMLBsButtonElement;
    'bs-button-group': HTMLBsButtonGroupElement;
    'bs-card': HTMLBsCardElement;
    'bs-card-group': HTMLBsCardGroupElement;
    'bs-carousel': HTMLBsCarouselElement;
    'bs-checkbox-group': HTMLBsCheckboxGroupElement;
    'bs-collapse': HTMLBsCollapseElement;
    'bs-dropdown': HTMLBsDropdownElement;
    'bs-form': HTMLBsFormElement;
    'bs-input-group': HTMLBsInputGroupElement;
    'bs-jumbotron': HTMLBsJumbotronElement;
    'bs-list-group': HTMLBsListGroupElement;
    'bs-modal': HTMLBsModalElement;
    'bs-nav': HTMLBsNavElement;
    'bs-navbar': HTMLBsNavbarElement;
    'bs-pagination': HTMLBsPaginationElement;
    'bs-panel': HTMLBsPanelElement;
    'bs-popover': HTMLBsPopoverElement;
    'bs-progress': HTMLBsProgressElement;
    'bs-progress-group': HTMLBsProgressGroupElement;
    'bs-spinner': HTMLBsSpinnerElement;
    'bs-table': HTMLBsTableElement;
    'bs-toast': HTMLBsToastElement;
    'bs-toolbar': HTMLBsToolbarElement;
    'bs-tooltip': HTMLBsTooltipElement;
    'bs-webpart': HTMLBsWebpartElement;
    'bs-webpart-list': HTMLBsWebpartListElement;
    'bs-webpart-search': HTMLBsWebpartSearchElement;
    'bs-webpart-tabs': HTMLBsWebpartTabsElement;
    'bs-webpart-taxonomy': HTMLBsWebpartTaxonomyElement;
  }
}

declare namespace LocalJSX {
  interface BsAccordion extends JSXBase.HTMLAttributes<HTMLBsAccordionElement> {
    'className'?: string;
    'id'?: string;
  }
  interface BsAlert extends JSXBase.HTMLAttributes<HTMLBsAlertElement> {
    'className'?: string;
    'content'?: string;
    'header'?: string;
    'isDismissible'?: boolean;
    'type'?: number;
  }
  interface BsBadge extends JSXBase.HTMLAttributes<HTMLBsBadgeElement> {
    'className'?: string;
    'content'?: string;
    'header'?: string;
    'href'?: string;
    'isPill'?: boolean;
    'type'?: number;
  }
  interface BsBreadcrumb extends JSXBase.HTMLAttributes<HTMLBsBreadcrumbElement> {
    'className'?: string;
  }
  interface BsButton extends JSXBase.HTMLAttributes<HTMLBsButtonElement> {
    'className'?: string;
    'controls'?: Array<string>;
    'data'?: any;
    'href'?: string;
    'id'?: string;
    'isBlock'?: boolean;
    'isDisabled'?: boolean;
    'isExpanded'?: boolean;
    'isLarge'?: boolean;
    'isLink'?: boolean;
    'isOutline'?: boolean;
    'isSmall'?: boolean;
    'target'?: string;
    'text'?: string;
    'toggle'?: string;
    'trigger'?: string;
    'type'?: number;
  }
  interface BsButtonGroup extends JSXBase.HTMLAttributes<HTMLBsButtonGroupElement> {
    'buttonType'?: number;
    'className'?: string;
    'id'?: string;
    'isLarge'?: boolean;
    'isSmall'?: boolean;
    'isVertical'?: boolean;
    'label'?: string;
  }
  interface BsCard extends JSXBase.HTMLAttributes<HTMLBsCardElement> {
    'className'?: string;
    'footer'?: string;
    'header'?: string;
    'imgBottom'?: object;
    'imgTop'?: object;
  }
  interface BsCardGroup extends JSXBase.HTMLAttributes<HTMLBsCardGroupElement> {
    'className'?: string;
  }
  interface BsCarousel extends JSXBase.HTMLAttributes<HTMLBsCarouselElement> {
    'className'?: string;
    'enableControls'?: boolean;
    'enableCrossfade'?: boolean;
    'enableIndicators'?: boolean;
    'id'?: string;
  }
  interface BsCheckboxGroup extends JSXBase.HTMLAttributes<HTMLBsCheckboxGroupElement> {
    'className'?: string;
    'colSize'?: number;
    'hideLabel'?: boolean;
    'label'?: string;
    'multi'?: boolean;
    'type'?: number;
  }
  interface BsCollapse extends JSXBase.HTMLAttributes<HTMLBsCollapseElement> {
    'className'?: string;
    'content'?: string;
    'id'?: string;
    'isMulti'?: boolean;
  }
  interface BsDropdown extends JSXBase.HTMLAttributes<HTMLBsDropdownElement> {
    'className'?: string;
    'dropLeft'?: boolean;
    'dropRight'?: boolean;
    'dropUp'?: boolean;
    'formFl'?: boolean;
    'id'?: string;
    'isSplit'?: boolean;
    'label'?: string;
    'menuOnly'?: boolean;
    'multi'?: boolean;
    'setLabelToValue'?: boolean;
    'type'?: number;
    'value'?: string;
  }
  interface BsForm extends JSXBase.HTMLAttributes<HTMLBsFormElement> {}
  interface BsInputGroup extends JSXBase.HTMLAttributes<HTMLBsInputGroupElement> {
    'appendedLabel'?: string;
    'className'?: string;
    'description'?: string;
    'id'?: string;
    'isLarge'?: boolean;
    'isPlainText'?: boolean;
    'isReadonly'?: boolean;
    'isSmall'?: boolean;
    'label'?: string;
    'placeholder'?: string;
    'prependedLabel'?: string;
    'rows'?: number;
    'type'?: number;
    'value'?: string;
  }
  interface BsJumbotron extends JSXBase.HTMLAttributes<HTMLBsJumbotronElement> {
    'className'?: string;
    'content'?: string;
    'isFluid'?: boolean;
    'lead'?: string;
  }
  interface BsListGroup extends JSXBase.HTMLAttributes<HTMLBsListGroupElement> {
    'className'?: string;
    'colWidth'?: number;
    'enableFade'?: boolean;
    'isFlush'?: boolean;
    'isTabs'?: boolean;
  }
  interface BsModal extends JSXBase.HTMLAttributes<HTMLBsModalElement> {
    'body'?: string;
    'className'?: string;
    'disableFade'?: boolean;
    'footer'?: string;
    'hideCloseButton'?: boolean;
    'id'?: string;
    'isCentered'?: boolean;
    'isLarge'?: boolean;
    'isSmall'?: boolean;
  }
  interface BsNav extends JSXBase.HTMLAttributes<HTMLBsNavElement> {
    'className'?: string;
    'enableFade'?: boolean;
    'enableFill'?: boolean;
    'id'?: string;
    'isJustified'?: boolean;
    'isPills'?: boolean;
    'isTabs'?: boolean;
    'isVertical'?: boolean;
  }
  interface BsNavbar extends JSXBase.HTMLAttributes<HTMLBsNavbarElement> {
    'brand'?: string;
    'brandUrl'?: string;
    'className'?: string;
    'enableSearch'?: boolean;
    'id'?: string;
    'type'?: number;
  }
  interface BsPagination extends JSXBase.HTMLAttributes<HTMLBsPaginationElement> {
    'alignment'?: number;
    'className'?: string;
    'icon'?: string;
    'isLarge'?: boolean;
    'isSmall'?: boolean;
    'label'?: string;
    'numberOfPages'?: number;
  }
  interface BsPanel extends JSXBase.HTMLAttributes<HTMLBsPanelElement> {
    'className'?: string;
    'type'?: number;
  }
  interface BsPopover extends JSXBase.HTMLAttributes<HTMLBsPopoverElement> {
    'className'?: string;
    'isDismissible'?: boolean;
    'type'?: number;
  }
  interface BsProgress extends JSXBase.HTMLAttributes<HTMLBsProgressElement> {
    'className'?: string;
    'isAnimated'?: boolean;
    'isStriped'?: boolean;
    'label'?: string;
    'max'?: number;
    'min'?: number;
    'size'?: number;
  }
  interface BsProgressGroup extends JSXBase.HTMLAttributes<HTMLBsProgressGroupElement> {
    'className'?: string;
    'isMultiple'?: boolean;
  }
  interface BsSpinner extends JSXBase.HTMLAttributes<HTMLBsSpinnerElement> {
    'className'?: string;
    'isGrowing'?: boolean;
    'isSmall'?: boolean;
    'text'?: string;
    'type'?: number;
  }
  interface BsTable extends JSXBase.HTMLAttributes<HTMLBsTableElement> {
    'className'?: string;
  }
  interface BsToast extends JSXBase.HTMLAttributes<HTMLBsToastElement> {
    'bodyText'?: string;
    'className'?: string;
    'closeButtonHidden'?: boolean;
    'closeButtonText'?: boolean;
    'headerImgClass'?: string;
    'headerImgSrc'?: string;
    'headerText'?: string;
  }
  interface BsToolbar extends JSXBase.HTMLAttributes<HTMLBsToolbarElement> {
    'className'?: string;
    'spacing'?: number;
  }
  interface BsTooltip extends JSXBase.HTMLAttributes<HTMLBsTooltipElement> {
    'className'?: string;
    'type'?: number;
  }
  interface BsWebpart extends JSXBase.HTMLAttributes<HTMLBsWebpartElement> {
    'cfgElementId'?: string;
    'className'?: string;
    'elementId'?: string;
    'wpClassName'?: string;
  }
  interface BsWebpartList extends JSXBase.HTMLAttributes<HTMLBsWebpartListElement> {
    'camlQuery'?: string;
    'cfgElementId'?: string;
    'className'?: string;
    'elementId'?: string;
    'wpClassName'?: string;
  }
  interface BsWebpartSearch extends JSXBase.HTMLAttributes<HTMLBsWebpartSearchElement> {
    'camlQuery'?: string;
    'cfgElementId'?: string;
    'className'?: string;
    'elementId'?: string;
    'wpClassName'?: string;
  }
  interface BsWebpartTabs extends JSXBase.HTMLAttributes<HTMLBsWebpartTabsElement> {
    'cfgElementId'?: string;
    'className'?: string;
    'elementId'?: string;
    'type'?: number;
    'wpClassName'?: string;
  }
  interface BsWebpartTaxonomy extends JSXBase.HTMLAttributes<HTMLBsWebpartTaxonomyElement> {
    'cfgElementId'?: string;
    'className'?: string;
    'elementId'?: string;
    'wpClassName'?: string;
  }

  interface IntrinsicElements {
    'bs-accordion': BsAccordion;
    'bs-alert': BsAlert;
    'bs-badge': BsBadge;
    'bs-breadcrumb': BsBreadcrumb;
    'bs-button': BsButton;
    'bs-button-group': BsButtonGroup;
    'bs-card': BsCard;
    'bs-card-group': BsCardGroup;
    'bs-carousel': BsCarousel;
    'bs-checkbox-group': BsCheckboxGroup;
    'bs-collapse': BsCollapse;
    'bs-dropdown': BsDropdown;
    'bs-form': BsForm;
    'bs-input-group': BsInputGroup;
    'bs-jumbotron': BsJumbotron;
    'bs-list-group': BsListGroup;
    'bs-modal': BsModal;
    'bs-nav': BsNav;
    'bs-navbar': BsNavbar;
    'bs-pagination': BsPagination;
    'bs-panel': BsPanel;
    'bs-popover': BsPopover;
    'bs-progress': BsProgress;
    'bs-progress-group': BsProgressGroup;
    'bs-spinner': BsSpinner;
    'bs-table': BsTable;
    'bs-toast': BsToast;
    'bs-toolbar': BsToolbar;
    'bs-tooltip': BsTooltip;
    'bs-webpart': BsWebpart;
    'bs-webpart-list': BsWebpartList;
    'bs-webpart-search': BsWebpartSearch;
    'bs-webpart-tabs': BsWebpartTabs;
    'bs-webpart-taxonomy': BsWebpartTaxonomy;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


